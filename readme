User manual
    download the zip file myapp.zip
	change directory to where the downloaded zip file is located
	write the command "unzip myapp.zip" to unzip the file
	write the command "gcc -pthread -o myapp myapp.c" to create an executable file myapp
	write the command "./myapp" to execute the program

The application is implemented in the programming language C (version C11) and is intended for Unix systems.
The application uses <pthread.h> for threads and <semaphore.h> for semaphores.

The idea behind the application is an Escape Room. The setting is two rooms, one waiting room and one escape room.
N groups arrives periodically at the waiting room, takes a chair if any left, and waits for the instructor
to invite k groups into the escape room. The instructor shares a mystery (integer) among the groups. The groups need to
cooperate in order to decrement the mystery to 0, because each group only has a fixed number of decrements (answers).
After the groups have used all their answers, the final result is submitted to the instructor. The instructor compares
the submission with the solution and announces whether or not the groups solved the mystery before inviting a new set
of groups to the escape room.
This sequence of events continues until the last group leaves the escape room.

The application achieves multithreading by allowing n groups (threads) to simultaneously compete for chairs in the
waiting room upon arrival. Followed by k groups - in turn -  decrementing a shared mystery, introduced by an instructor
thread, in the escape room.
Every time a shared (global) variable comes into play, mutual exclusion needs to be accounted for to avoid race
conditions.

Mutual exclusion is secured by multiple semaphores because of multiple critical sections. When a variable like chairs
can be read from and written to by multiple threads at the same time, a lock needs to be acquired to ensure an atomic operation
(read followed by a write) and released thereafter. Otherwise one thread can write after another thread have read the value
resulting in a wrong answer.

My application does not use threads to enhance performance but strictly for educational purposes. Therefore any time
the shared variable chairs is modified, the new value is printed to the console. The same when k groups are cooperating to
solve the mystery, each group prints out in the console the current value of the mystery and after they decremented it.

The user of this application is welcome to change a number of variables to create interesting scenarios as long as the
conditions arefulfilled. The conditions are stated in the top of myapp.c and leaves room for modifying NUM_CHAIRS,
NUM_GROUPS, GROUPS_PR_INSTRUCTOR and ANSWERS_PR_GROUP.

Test:
Without mutual exclusion by commenting out line 99 and line 103
Group A changes global mystery 8 -> 7
Group B changes global mystery 8 -> 7
Group A changes global mystery 7 -> 6
Group B changes global mystery 7 -> 6
Group A changes global mystery 6 -> 5
Group B changes global mystery 5 -> 4
Group B changes global mystery 4 -> 3
Group A changes global mystery 4 -> 3
Unlucky group A group B The mystery is NOT solved!

With mutual exclusion
Group B changes global mystery 8 -> 7
Group A changes global mystery 7 -> 6
Group B changes global mystery 6 -> 5
Group A changes global mystery 5 -> 4
Group B changes global mystery 4 -> 3
Group A changes global mystery 3 -> 2
Group B changes global mystery 2 -> 1
Group A changes global mystery 1 -> 0
Congratulations group A group B The mystery is solved!